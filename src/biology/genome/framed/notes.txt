

 FramedGenome Execution Grammar

 //frame := [register_preload, genome]
 //register_load := [N_registers, sensor_idx]

FRAME := [default_channel, gene1, (gene2,) (gene3,)...]
GENE := [predicate, operation],
(a gene defines a single IF-THEN statement)

brainstorm:
right now a gene is an IF-THEN-DO
could we make a gene that is more like
IF cond1:
	IF cond2:
		DO foo_reaction
	IF cond2:
		DO bar_reaction
	ELSE:
		DO baz_reaction

or

IF cond1:
	SWITCH(N) param1:
	case 1:
		...
	case 2:
		...
	case N:
		...

a gene would look like
gene := [gene_type_code, <gene_type>]
where gene_type is:
-- IF-IFELSE-THEN-GENE
-- IF-SWITCH-THEN

where 
IF_SWITCH_THEN := [predicate, switch]
SWITCH := [CASE_COUNT, OP_PARAM_FLAG, PARAM, PARAM_TRANSFORM?, CASE1, (CASE1, CASE2, ..., CASE_N)]
CASE := [OPERATION]

what would this add?
in some ways this same concept could be expressed via channels, but channels are meant more 
to be used to set certain higher-level behavioral modes
but it would also simplify exressing certain conditionals (ie. if we are low on energy, then do this logic.  otherwise do this other logic.)



PREDICATE := [DISJUNCTION]

DISJUNCTION (or) := [N_or_clauses, IS_NEGATED, clause1, clause2, ... clauseN]
CONJUNCTION (and) := [N_and_clauses, IS_NEGATED, conditional1, conditional2, ...conditionalN]
CONDITIONAL := [operator_code, IS_NEGATED, param1_flag, param1, param2_flag, param2, param3_flag, param3]
OP_PARAM_FLAG := PARAM_FLAG
OPERATION := [reaction_type_code, reaction] | [metareaction_type_code, meta_reaction]
(ie. an operation is either a reaction or meta-reaction, defined by the first value in the pair)

REACTION := [reaction_call_id, reaction_param_flag1, param1, reaction_param_flag2, param2, reaction_param_flag3, param3],
REACTION_PARAM_FLAG := PARAM_FLAG
(a reaction, when executed causes the genome execution to terminate, resulting in that reaction being performed)

META_REACTION := [meta_metareaction_id, metareaction_param_flag1, param1, metareaction_param_flag2, param2, reaction_param_flag3, param3],
METAREACTION_PARAM_FLAG := PARAM_FLAG
(a meta reaction when executed causes a change in the genome execution (eg. jump ahead a frame, change default channel, etc))

PARAM_FLAG := (<IS_SENSOR | IS_REGISTER | IS_LITERAL | IS_RANDOM | IS_SENSOR_CACHE>):byte,
(a param flag comes before a parameter value to express which semantics to use to evaluate that parameter value (eg. sensor value, constant, etc))

--- example 
genome_frame!(
   gene!(
       if_any(
           all(
               (is_truthy, "pos_attr::is_cheese_source(0, 0)", 0, 0),
               (gt, unit_res::cheese, 1000, 0)
           )
       ),

       then_do(move_unit(literal(right)))
   ),

   gene!(''),
   gene!('')
)

question:  how do i say, find an open square adjacent to me, and use that as a parameter?  is that what a register could be used for? ephemeral data?
--> make a sensor that calculates this and returns a direction

/*
 *
 * Frames:
 * -maybe a frame could have a modifier bit at the beginning that causes a small-moderate transformation on the
 *  frame's contents (maybe a subset of the space has its words reversed?)
 * - maybe a frame can have a bit that enables a probabilistic execution of the conditionals in
 *  that frame, as a way of supressing behavior?  and maybe this logic could be easily connected
 *  to data in registers.
 *
 *
 * ReactionDurations
 * Should a unit have the option, during the course of a genome execution, of choosing to do a reaction multiple times?
 * ie. the unit could say, I want to immediately execute this reaction 5 times, but then I have to
 * skip my next 2 turns?  This is a way to incentivize some units to evolve towards doing multiple
 * reactions, which would cut down the overhead for calculating that units genome.
 *
 *
 * Meta Reactions
 * jump to next/prev frame
 * jump X frames ahead/behind
 *
 * should the genome be able to write to a register?
 * registers 1-3
 */



/*
* BRAINSTORMING (future data types)
*
* 8 bytes
*
* 1 bit = 8 bits = 4 * 2bits
*
* flex number  (flex_num)
* 0,x,y,z -> x + y + z //12
* 1,x,y,z -> 2x * 2y * 2z //
* 2,x,y,z -> (x^3 * y^2 * z^1) //
* 3,x,y,z -> (x^8 * y^2 * z^2) //65536
*
* big flex number (big_flex_num)  (2 words)
* 0,x,y,z -> x + y + z //12
* 1,x,y,z -> 2x * 2y * 2z //
* 2,x,y,z -> (x^3 * y^2 * z^1) //
* 3,x,y,z -> (x^8 * y^2 * z^2) //65536
*
* operation number (op_num)
* 0,x,y,z -> x + y + z
* 1,x,y,z -> x*y*z
* 2,x,y,z -> 2x*y*z
* 3,x,y,z -> 3x*y*z

* small number (small_num)
* 0,x,y,z -> x + y + z
* 1,x,y,z -> x + y + z
* 2,x,y,z -> x + y + z
* 3,x,y,z -> 2x + 2y + 2z

* tiny number (tiny_num, 0-3)
* 0,x,y,z -> x
* 1,x,y,z -> x
* 2,x,y,z -> x
* 3,x,y,z -> x
*
*/